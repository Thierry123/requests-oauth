{"name":"Requests-oauth","body":"# requests-oauth\r\n\r\nThis plugins adds OAuth v1.0 support to <a href=\"https://github.com/kennethreitz\">@kennethreitz</a> well-known <a href=\"http://github.com/kennethreitz/requests\">requests</a> library providing both header and url-encoded authentication.\r\n\r\nrequests-oauth wants to provide the simplest and easiest way to do OAuth in Python. It was initially based on <a href=\"https://github.com/simplegeo/python-oauth2\">python-oauth2</a> (which looks unmaintained), kudos to the authors and contributors for doing a huge effort in providing OAuth to python httplib2. From that point on, the code base has been cleaned, fixing several bugs and heavily refactoring it to eliminate dependencies with python-oauth2, being now a stand-alone plugin.\r\n\r\n* Author: <a href=\"http://www.github.com/maraujop/\">Miguel Araujo</a>\r\n* Licence: BSD\r\n\r\n## Installation\r\n\r\nYou can install requests-oauth by simply doing:\r\n\r\n    pip install requests-oauth\r\n\r\n## Usage\r\n\r\nImport the hook doing:\r\n\r\n    from oauth_hook import OAuthHook\r\n\r\nYou can initialize the hook passing it 5 parameters: `access_token`, `access_token_secret`, `consumer_key`, `consumer_secret` and `header_auth`. First two `access_token` and `access_token_secret` are optional, in case you want to retrieve those from the API service (see later for an example). There are two ways to do initialize the hook. First one:\r\n\r\n    oauth_hook = OAuthHook(access_token, access_token_secret, consumer_key, consumer_secret, header_auth)\r\n\r\nThe `header_auth` parameter lets you chose the authentication method used. It's a boolean, if you set it to `True` you will be using an Authorization header. If your API supports this authentication method, it's the one you should be using and the prefered method by the OAuth spec (<a href=\"http://tools.ietf.org/html/rfc5849#section-3.5\">RFC 5849</a>), an example would be Twitter's API. By default `header_auth` is set to `False`, which means url encoded authentication will be used. This is because this the most widely supported authentication system.\r\n\r\nIf you are using the same `consumer_key` and `consumer_secret` all the time, you probably want to setup those fixed, so that you only have to pass the token parameters for setting the hook:\r\n\r\n    OAuthHook.consumer_key = consumer_key\r\n    OAuthHook.consumer_secret = consumer_secret\r\n    oauth_hook = OAuthHook(access_token, access_token_secret, header_auth=True)\r\n\r\nNow you need to pass the hook to python-requests, you probably want to do it as a session, so you don't have to do this every time:\r\n\r\n    client = requests.session(hooks={'pre_request': oauth_hook})\r\n\r\nWhat you get is python-requests client which you can use the same way as you use requests API. Let's see a GET example:\r\n\r\n    response = client.get('http://api.twitter.com/1/account/rate_limit_status.json')\r\n    results = json.loads(response.content)\r\n\r\nAnd a POST example:\r\n\r\n    response = client.post('http://api.twitter.com/1/statuses/update.json', {'status': \"Yay! It works!\", 'wrap_links': True})\r\n\r\nBeware that you are not forced to pass the token information to the hook. That way you can retrieve it from the API. Let's see a Twitter example:\r\n\r\n    client = requests.session(hooks={'pre_request': OAuthHook(consumer_key=consumer_key, consumer_secret=consumer_secret)})\r\n    response = client.get('https://api.twitter.com/oauth/request_token')\r\n    response = parse_qs(response.content)\r\n    print \"Token: %s  Secret: %s\" % (response['oauth_token'], response['oauth_token_secret'])\r\n\r\n## Testing\r\n\r\nIf you want to run the tests, you will need to copy `test_settings.py.template` into `test_settings.py`. This file is in the `.gitignore` index, so it won't be committed:\r\n\r\n    cp test_settings.py.template test_settings.py\r\n\r\nThen fill in the information there. At the moment, the testing of the library is done in a functional way, doing a GET and a POST request against OAuth API services, so use a test account and not your personal account:\r\n\r\n    ./tests.py\r\n\r\n## Contributing\r\n\r\nIf you'd like to contribute, simply fork the repository, commit your changes to the `dev` branch (or branch off of it), and send a pull request. Make sure you add yourself to AUTHORS.","tagline":"Python's Requests OAuth (Open Authentication) plugin","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}